

blosum62_matrix = [
    [4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0],
    [-1, 5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3],
    [-2, 0,  6,  1, -3,  0,  0,  0,  1, -3, -4,  0, -2, -3, -2,  1,  0, -4, -2, -3],
    [-2,-2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3],
    [ 0,-3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1],
    [-1, 1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2],
    [-1, 0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2],
    [ 0,-2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3],
    [-2, 0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3],
    [-1,-3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3],
    [-1,-2, -4, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1],
    [-1, 2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2],
    [-1,-1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1],
    [-2,-3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1],
    [-1,-2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2],
    [ 1,-1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2],
    [ 0,-1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0],
    [-3,-3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3],
    [-2,-2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1],
    [ 0,-3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4]
];

gap_penalty = 4;

const amino_ascii_to_index = [0, -1, 4, 3, 6, 13, 7, 8, 9, -1, 11, 10, 12, 2, -1, 14, 5, 1, 15, 16, -1, 19, 17, -1, 18, -1];

function getBlosum(char1, char2) {
    return blosum62_matrix[amino_ascii_to_index[char1.charCodeAt(0) - 65]][amino_ascii_to_index[char2.charCodeAt(0) - 65]];
}

// const amino_to_index = {
//     'A': 0, 'R': 1, 'N': 2, 'D': 3, 'C': 4, 'Q': 5, 'E': 6, 'G': 7, 'H': 8, 'I': 9,
//     'L': 10, 'K': 11, 'M': 12, 'F': 13, 'P': 14, 'S': 15, 'T': 16, 'W': 17, 'Y': 18,
//     'V': 19
// };

function create_matrix(N, M) {
    var m = new Array(M);
    var copy = new Array(N);
    for(var i = 0; i < N; i++) {
        copy[i] = 0;
    }
    
    for(var i = 0; i < m.length; i++){
        m[i] = copy.slice(0);
    }

    return m;
}

function needleman_wunsch(seq1, seq2, gap_penalty) {
    const N = seq1.length; const M = seq2.length;
    res = create_matrix(N+1, M+1);

    for(let line = 1; line < M + 1; line++) {
        for(let col = 1; col < N + 1; col++) {
            res[line][col] = Math.max(
                res[line - 1][col - 1] + getBlosum(seq1[col - 1], seq2[line - 1]),
                res[line - 1][col] - gap_penalty,
                res[line][col - 1] - gap_penalty
            );
        }
    }
    //console.log(res[M][N]);
}

// Main
// -- Usage: time node homemdaagulha.js <seq1> <seq2>
const args = process.argv.slice(2);
const seq1 = args[0];
const seq2 = args[1];
needleman_wunsch(seq1, seq2, gap_penalty);