#include <iostream>
#include <vector>

using namespace std;

int match(string sequence1, string sequence2,int gapPenalty, int blosum62[20][20]) {

    int m = sequence1.size();
    int n = sequence2.size();

    int char_to_index[26] = {0, -1, 4, 3, 6, 13, 7, 8, 9, -1, 11, 10, 12, 2, -1, 14, 5, 1, 15, 16, -1, 19, 17, -1, 18, -1};

    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    for (int i = 0; i <= m; i++) {
        dp[i][0] = 0;
    }

    for (int j = 0; j <= n; j++) {
        dp[0][j] = 0;
    }

    // Fill in the matrix using the Needleman-Wunsch algorithm  
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            int matchScore = dp[i - 1][j - 1] + blosum62[char_to_index[sequence1[i - 1] - 'A']][char_to_index[sequence2[j - 1] - 'A']];
            int deleteScore = dp[i - 1][j] + gapPenalty;
            int insertScore = dp[i][j - 1] + gapPenalty;
            dp[i][j] = max(matchScore, max(deleteScore, insertScore));
        }
    }
    
    //std::cout << "Alignment Score: " << dp[m][n] << endl;

    return 0;
}

int main(int argc, char** argv) {
    string sequence1, sequence2;
    int gapPenalty;

    sequence1 = argv[1];
    sequence2 = argv[2];
    gapPenalty = -4;

    // BLOSUM62 matrix
    int blosum62[20][20] = {
    {4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0},
    {-1, 5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3},
    {-2, 0,  6,  1, -3,  0,  0,  0,  1, -3, -4,  0, -2, -3, -2,  1,  0, -4, -2, -3},
    {-2,-2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3},
    { 0,-3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1},
    {-1, 1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2},
    {-1, 0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2},
    { 0,-2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3},
    {-2, 0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3},
    {-1,-3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3},
    {-1,-2, -4, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1},
    {-1, 2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2},
    {-1,-1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1},
    {-2,-3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1},
    {-1,-2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2},
    { 1,-1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2},
    { 0,-1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0},
    {-3,-3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3},
    {-2,-2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1},
    { 0,-3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4}
    };
    match(sequence1, sequence2, gapPenalty, blosum62);

    return 0;
}